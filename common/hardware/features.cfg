#####################################################################
##                     Model and acceleration
#####################################################################

[printer]
kinematics : corexy           # Printer typeï¼šcorexy
max_velocity : 300            # Maximum speed (max. 300)
max_accel : 5000              # Maximum acceleration (max. 4000)
max_z_velocity : 15           # Z-axis maximum speed
max_z_accel : 350             # Z-axis maximum acceleration
square_corner_velocity : 5.0  # Square corner speed

#####################################################################
# 	                   Bed Grid Calibration
#####################################################################

[bed_mesh]
speed : 80                    # Calibration speed
horizontal_move_z : 10        # Z-axis movement speed
mesh_min : 30,30              # Minimum calibration point coordinates x, y
mesh_max : 270, 270           # Maximum calibration point coordinates x, y
probe_count : 7,7             # Number of sampling points (7X7 is 49 points)
mesh_pps : 2,2                # Number of supplementary sampling points
algorithm : bicubic           # algorithmic model
bicubic_tension : 0.2         # Algorithmic interpolation don't move

#####################################################################
#                            RGB-LEDlight
#####################################################################

#[neopixel LEDlight]
#pin: PB0                     # signal interface
#chain_count: 18              # Number of lamp beads
#color_order: GRB             # colour sequence
#initial_RED: 0.2             # Initial red brightness
#initial_GREEN: 0.2           # Initial green brightness
#initial_BLUE: 0.2            # Initial blue brightness

[neopixel sb_leds]
pin: EBBCan:gpio16
#   The pin connected to the neopixel. This parameter must be provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 1.0
initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.#

# Most configuration for the macros can be done by modifying the variables in the _sb_vars macro
# at the start of this file.

##########
# MACROS #
##########

# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#
# With additional macros for basic control:
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#
# Contributed by Voron discord users wile.e, Tetsunosuke, and etherwalker


[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
                 'logo': { # Colors for logo states
                 'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
                 'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
                 'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
                 'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
                 'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
                 'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
                 'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
                 'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
                 'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
                 'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
                 },
                 'nozzle': { # Colors for nozzle states
                 'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
                 'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
                 'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
                 'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
                 },
                 'thermal': {
                 'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
                 'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
                 }
                 }
variable_logo_led_name:         "sb_leds"
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1"
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
# This section is required.  Do Not Delete.


[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
    {% set transmit=transmit_last if loop.last else 0 %}
    set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

#####################################################################
#                          Idle off hot bed
#####################################################################

[idle_timeout]
gcode:
    _DEMON_IDLE_TIMEOUT
timeout : 3600                # The hot bed is switched off if the idle time exceeds 30 minutes

#####################################################################
#                        Homing and Gantry Adjustment
#####################################################################

[homing_override]
axes : z
set_position_z : 0
gcode :
    G90
    G0 Z5 F1800
    G28 X Y
    G0 X175 Y175 F7200    #350mm
    G28 Z
    G0 Z10  F1800
    G0 X175 Y175 Z30 F1800

#####################################################################

## NPN and PNP proximity switch types can be set by jumper  24V
[probe]
pin : !EBBCan:gpio22
x_offset : 0     			 # X-axis - sensor offset relative to the nozzle
y_offset : 25     			 # Y-axis - sensor offset relative to the nozzle
# z_offset : 0                  # Z-axis - sensor offset relative to the nozzle
#You'll need to manually calibrate the probe's Z offset by using "PROBE_CALIBRATE"
speed : 10.0                  # Levelling speed
samples : 3                   # sampling frequency
samples_result : median       # Value type (default median)
sample_retract_dist : 3.0     # Levelling retraction distance
samples_tolerance : 0.01      # Sampling tolerance (note that too small a value may result in increased sampling)
samples_tolerance_retries : 3 # Number of out-of-tolerance retries

##-----------Reduce nozzle temperature for gantry levelling-------##
activate_gcode =
    {% set PROBE_TEMP = 150 %}                     ## Setting the print head temperature 150
    {% set MAX_TEMP = PROBE_TEMP + 5 %}            ## Limit temperature +5 degrees
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}              ## Checking the temperature
    { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
    M109 S{ PROBE_TEMP }
    {% else %}

    {% if ACTUAL_TEMP > MAX_TEMP %}                ## Judging the actual temperature
    { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
    {% endif %}
    {% endif %}

####################################################################################
#	                         Gantry levelling
####################################################################################

[quad_gantry_level]
gantry_corners :
    -60,-10
    410,420
points :
    50,25
    50,275
    300,275
    300,25

#--------------------------------------------------------------------
speed : 150                          # Levelling speed
horizontal_move_z : 10               # Z-axis starting height
retries : 5                          # Number of out-of-tolerance retries
retry_tolerance : 0.01               # Sampling tolerance
max_adjust : 10                      # Maximum adjustment stroke for levelling

[board_pins]
aliases :
# EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,       # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

# EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,         # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5

####################################################################################
#	                         Resonance testing
####################################################################################

[adxl345]
cs_pin : EBBCan:gpio1
spi_software_sclk_pin : EBBCan:gpio2
spi_software_mosi_pin : EBBCan:gpio0
spi_software_miso_pin : EBBCan:gpio3
axes_map : z,-y,x

[resonance_tester]
probe_points : 100, 100, 20
accel_chip : adxl345